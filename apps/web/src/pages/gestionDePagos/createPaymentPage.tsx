import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import {
  Box,
  Paper,
  Typography,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  CircularProgress,
  IconButton,
  Stack,
} from '@mui/material';
import { ArrowBack as ArrowBackIcon } from '@mui/icons-material';
import { paymentService, CreatePaymentRequest } from '../../services/paymentService';

const CreatePaymentPage: React.FC = () => {
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const [formData, setFormData] = useState<CreatePaymentRequest>({
    amount: 0,
    currency: 'ARS', // Default to ARS for Argentine market
    user_id: '', // Will be derived from externalUserId
    meta: {},
    // Reservas fields - only the ones user needs to provide
    externalUserId: 0,
    reservationId: 0,
  });

  const [lastResponse, setLastResponse] = useState<any>(null);

  const createPaymentMutation = useMutation({
    mutationFn: (data: CreatePaymentRequest) => paymentService.createPayment(data),
    onSuccess: (response: any) => {
      setLastResponse(response); // Store the response for testing
      if (response.success) {
        // Invalidate payments query to refresh the list
        queryClient.invalidateQueries({ queryKey: ['payments'] });
        // Don't navigate away immediately so we can see the response
        // navigate('/payments');
      }
    },
  });

  const handleChange = (field: keyof CreatePaymentRequest) => (
    event: React.ChangeEvent<HTMLInputElement | { value: unknown }>
  ) => {
    const value = event.target.value;
    let parsedValue: any = value;
    
    if (field === 'amount') {
      parsedValue = parseFloat(value as string) || 0;
    } else if (field === 'externalUserId' || field === 'reservationId') {
      parsedValue = value === '' ? undefined : parseInt(value as string) || undefined;
    }
    
    setFormData((prev: CreatePaymentRequest) => ({
      ...prev,
      [field]: parsedValue,
    }));
  };

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    
    // Clean Reservas integration - only the required fields
    const paymentData: CreatePaymentRequest = {
      amount: formData.amount,
      currency: formData.currency,
      user_id: formData.externalUserId?.toString(), // Store externalUserId directly as string
      externalUserId: formData.externalUserId,
      reservationId: formData.reservationId,
      // Payment_status and PaymentEventId will be auto-generated by backend
    };

    createPaymentMutation.mutate(paymentData);
  };

  const handleBack = () => {
    navigate('/payments');
  };

  const isLoading = createPaymentMutation.isPending;
  const error = (createPaymentMutation.data as any)?.error;

  return (
    <Box p={3}>
      {/* Header */}
      <Box display="flex" alignItems="center" mb={3}>
        <IconButton onClick={handleBack} sx={{ mr: 2 }}>
          <ArrowBackIcon />
        </IconButton>
        <Typography variant="h4" component="h1" fontWeight="bold">
          Crear Nuevo Pago - Integración Reservas
        </Typography>
      </Box>

      {/* Error Alert */}
      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          Error al crear el pago: {error}
        </Alert>
      )}

      {/* Form */}
      <Paper sx={{ p: 3 }}>
        <form onSubmit={handleSubmit}>
          <Stack spacing={3}>
            {/* Reservas Integration Fields */}
            <Typography variant="h6">
              Información de la Reserva
            </Typography>

            <Box display="flex" gap={2}>
              <TextField
                fullWidth
                type="number"
                required
                label="External User ID"
                value={formData.externalUserId || ''}
                onChange={handleChange('externalUserId')}
                helperText="ID del usuario en el sistema de Reservas"
                placeholder="ej: 5"
                inputProps={{ min: 1 }}
              />

              <TextField
                fullWidth
                type="number"
                required
                label="Reservation ID"
                value={formData.reservationId || ''}
                onChange={handleChange('reservationId')}
                helperText="ID de la reserva en el sistema"
                placeholder="ej: 15"
                inputProps={{ min: 1 }}
              />
            </Box>

            <TextField
              fullWidth
              type="number"
              required
              label="Monto"
              value={formData.amount}
              onChange={handleChange('amount')}
              inputProps={{ 
                min: 0, 
                step: 0.01,
                style: { textAlign: 'right' }
              }}
              helperText="Monto del pago para la reserva"
            />

            <FormControl fullWidth>
              <InputLabel>Moneda</InputLabel>
              <Select
                value={formData.currency}
                label="Moneda"
                onChange={(e) => setFormData((prev: CreatePaymentRequest) => ({ ...prev, currency: e.target.value as any }))}
              >
                <MenuItem value="ARS">Peso Argentino (ARS)</MenuItem>
                <MenuItem value="USD">Dólar Estadounidense (USD)</MenuItem>
                <MenuItem value="EUR">Euro (EUR)</MenuItem>
              </Select>
            </FormControl>

            {/* Preview */}
            <Paper sx={{ p: 2, backgroundColor: 'grey.50' }}>
              <Typography variant="h6" gutterBottom>
                Vista Previa del Pago
              </Typography>
              <Typography variant="body2">
                <strong>Usuario Externo:</strong> {formData.externalUserId || 'Sin especificar'}
              </Typography>
              <Typography variant="body2">
                <strong>ID Reserva:</strong> {formData.reservationId || 'Sin especificar'}
              </Typography>
              <Typography variant="body2">
                <strong>Monto:</strong> {paymentService.formatCurrency(formData.amount, formData.currency || 'ARS')}
              </Typography>
              <Typography variant="body2">
                <strong>Estado Inicial:</strong> Procesado a través del Gateway (Auto-generado)
              </Typography>
              <Typography variant="body2">
                <strong>Event ID:</strong> Auto-generado por el sistema
              </Typography>
              <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary' }}>
                * El pago será procesado automáticamente con las mismas reglas del gateway
              </Typography>
            </Paper>

            {/* Actions */}
            <Box display="flex" gap={2} justifyContent="flex-end">
              <Button
                variant="outlined"
                onClick={handleBack}
                disabled={isLoading}
              >
                Cancelar
              </Button>
              <Button
                type="submit"
                variant="contained"
                disabled={isLoading || !formData.externalUserId || !formData.reservationId || formData.amount <= 0}
                startIcon={isLoading ? <CircularProgress size={20} /> : null}
                sx={{ backgroundColor: '#1976d2' }}
              >
                {isLoading ? 'Creando...' : 'Crear Pago'}
              </Button>
            </Box>
          </Stack>
        </form>
      </Paper>

      {/* Testing Response Display */}
      {lastResponse && (
        <Paper sx={{ p: 3, mt: 3, backgroundColor: '#f5f5f5' }}>
          <Typography variant="h6" gutterBottom color="primary">
            🧪 Respuesta del Webhook (Testing)
          </Typography>
          <Typography variant="body2" color="text.secondary" gutterBottom>
            Esta es la respuesta que recibe el módulo de Reservas:
          </Typography>
          <Box 
            sx={{ 
              backgroundColor: '#1e1e1e', 
              color: '#dcdcdc', 
              p: 2, 
              borderRadius: 1, 
              fontFamily: 'monospace',
              fontSize: '14px',
              overflowX: 'auto'
            }}
          >
            <pre>{JSON.stringify(lastResponse, null, 2)}</pre>
          </Box>
          <Box display="flex" gap={2} mt={2}>
            <Button 
              variant="outlined" 
              size="small"
              onClick={() => navigator.clipboard.writeText(JSON.stringify(lastResponse, null, 2))}
            >
              Copiar JSON
            </Button>
            <Button 
              variant="outlined" 
              size="small" 
              onClick={() => setLastResponse(null)}
            >
              Limpiar
            </Button>
            <Button 
              variant="contained" 
              size="small"
              onClick={() => navigate('/payments')}
              sx={{ ml: 'auto' }}
            >
              Ir a Lista de Pagos
            </Button>
          </Box>
        </Paper>
      )}
    </Box>
  );
};

export default CreatePaymentPage;
