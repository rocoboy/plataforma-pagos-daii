# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Deploy to Vercel

on:
  push:
    branches: [develop, main]

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      api: ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v4
      - name: Debug changed files
        run: |
          echo "=== Changed files ==="
          git diff --name-only HEAD~1 HEAD || echo "No previous commit to compare"
          echo "=== All files in this commit ==="
          git diff-tree --no-commit-id --name-only -r HEAD
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'apps/web/pnpm-lock.yaml'
              - 'apps/types/**'
            api:
              - 'apps/api/**'
              - 'apps/api/bun.lock'
              - 'apps/types/**'
      - name: Debug filter results
        run: |
          echo "Web changes detected: ${{ steps.filter.outputs.web }}"
          echo "API changes detected: ${{ steps.filter.outputs.api }}"

  deploy-web:
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    concurrency: { group: 'deploy-web', cancel-in-progress: true }
    outputs:
      url: ${{ steps.vercel-deploy-web.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: 'apps/web/pnpm-lock.yaml'

      - name: Install deps (web)
        working-directory: apps/web
        run: pnpm install --frozen-lockfile

      - name: Vercel pull
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          rm -rf .vercel
          npx vercel pull --yes --environment=preview --token "$VERCEL_TOKEN"
        shell: bash

      - name: Build (vercel)
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: npx vercel build --token "$VERCEL_TOKEN"
        shell: bash


      - name: Deploy (vercel)
        id: vercel-deploy-web
        working-directory: apps/web
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          URL=$(npx vercel deploy --prebuilt --token "$VERCEL_TOKEN" --yes | tail -n1)
          echo "url=$URL" >> "$GITHUB_OUTPUT"
        shell: bash

      # Alias branch -> URL definida (si existe y es dominio propio)
      - name: Debug alias info (web)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Branch: ${{ github.ref }}"
          echo "WEB_URL_PREPROD: '${{ vars.WEB_URL_PREPROD }}'"
          echo "WEB_URL_PREPROD length: ${#WEB_URL_PREPROD}"
          echo "Deploy URL: ${{ steps.vercel-deploy-web.outputs.url }}"

      # - name: Add domain develop (web)
      #   if: github.ref == 'refs/heads/develop' && vars.WEB_URL_PREPROD != ''
      #   working-directory: apps/web
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
      #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      #     DOMAIN: ${{ vars.WEB_URL_PREPROD }}
      #   run: |
      #     echo "Adding domain: $DOMAIN to project"
      #     npx vercel domains add "$DOMAIN" --token "$VERCEL_TOKEN"


  deploy-api:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    concurrency: { group: 'deploy-api', cancel-in-progress: true }
    outputs:
      url: ${{ steps.vercel-deploy-api.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Bun
        run: npm install -g bun
      - name: Install deps (api)
        working-directory: apps/api
        run: bun install --frozen-lockfile

      - name: Vercel pull
        working-directory: apps/api
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_API_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          rm -rf .vercel
          npx vercel pull --yes --environment=preview --token "$VERCEL_TOKEN"
        shell: bash


      - name: Build (vercel)
        working-directory: apps/api
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: npx vercel build --token "$VERCEL_TOKEN"
        shell: bash


      - name: Deploy (vercel)
        id: vercel-deploy-api
        working-directory: apps/api
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          URL=$(npx vercel deploy --prebuilt --token "$VERCEL_TOKEN" --yes | tail -n1)
          echo "url=$URL" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Debug alias info (api)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Branch: ${{ github.ref }}"
          echo "API_URL_PREPROD: '${{ vars.API_URL_PREPROD }}'"
          echo "API_URL_PREPROD length: ${#API_URL_PREPROD}"
          echo "Deploy URL: ${{ steps.vercel-deploy-api.outputs.url }}"

      # - name: Add domain develop (api)
      #   if: github.ref == 'refs/heads/develop' && vars.API_URL_PREPROD != ''
      #   working-directory: apps/api
      #   env:
      #     VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #     VERCEL_PROJECT_ID: ${{ secrets.VERCEL_API_PROJECT_ID }}
      #     VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      #     DOMAIN: ${{ vars.API_URL_PREPROD }}
      #   run: |
      #     echo "Adding domain: $DOMAIN to project"
      #     npx vercel domains add "$DOMAIN" --token "$VERCEL_TOKEN"


  summary:
    name: 📋 Deployment Summary

    needs: [changes, deploy-web, deploy-api]
    if: ${{ always() }} 
    runs-on: ubuntu-latest
    steps:
      - name: Generate deployment summary
        env:
          BRANCH: ${{ github.ref }}
          WEB_CHANGED: ${{ needs.changes.outputs.web }}
          API_CHANGED: ${{ needs.changes.outputs.api }}

          WEB_URL: ${{ vars.WEB_URL }}
          API_URL: ${{ vars.API_URL }}
          WEB_URL_PREPROD: ${{ vars.WEB_URL_PREPROD }}
          API_URL_PREPROD: ${{ vars.API_URL_PREPROD }}

          WEB_DEPLOY_URL: ${{ needs.deploy-web.outputs.url }}
          API_DEPLOY_URL: ${{ needs.deploy-api.outputs.url }}
        run: |
          # Extract branch name
          branch_name=$(echo "$BRANCH" | sed 's|refs/heads/||')
          
          # Create simple summary
          echo "# 🚀 Deployment Summary - \`${branch_name}\`" > "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Show public URLs
          if [ "$branch_name" = "main" ]; then
            echo "## 🌐 Production URLs" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Web**: ${WEB_URL:-*not configured*}" >> "$GITHUB_STEP_SUMMARY"
            echo "- **API**: ${API_URL:-*not configured*}" >> "$GITHUB_STEP_SUMMARY"
          elif [ "$branch_name" = "develop" ]; then
            echo "## 🧪 Preview URLs" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Web**: ${WEB_URL_PREPROD:-*not configured*}" >> "$GITHUB_STEP_SUMMARY"
            echo "- **API**: ${API_URL_PREPROD:-*not configured*}" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          # Show internal URLs only if they exist
          if [ -n "$WEB_DEPLOY_URL" ] || [ -n "$API_DEPLOY_URL" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "## 🔗 Internal Vercel URLs" >> "$GITHUB_STEP_SUMMARY"
            if [ -n "$WEB_DEPLOY_URL" ]; then
              echo "- **Web**: $WEB_DEPLOY_URL" >> "$GITHUB_STEP_SUMMARY"
            fi
            if [ -n "$API_DEPLOY_URL" ]; then
              echo "- **API**: $API_DEPLOY_URL" >> "$GITHUB_STEP_SUMMARY"
            fi
          fi
