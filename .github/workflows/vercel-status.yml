# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Vercel Status Check

on:
  pull_request:
    branches: [develop, main]
    paths:
      - 'apps/web/**'
      - 'apps/api/**'
      - 'apps/types/**'
      - '.github/workflows/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      api: ${{ steps.filter.outputs.api }}
    steps:
      - uses: actions/checkout@v4
      - name: Debug changed files
        run: |
          echo "=== Changed files ==="
          git diff --name-only HEAD~1 HEAD || echo "No previous commit to compare"
          echo "=== All files in this commit ==="
          git diff-tree --no-commit-id --name-only -r HEAD
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'apps/web/pnpm-lock.yaml'
              - 'apps/types/**'
            api:
              - 'apps/api/**'
              - 'apps/api/bun.lock'
              - 'apps/types/**'
      - name: Debug filter results
        run: |
          echo "Web changes detected: ${{ steps.filter.outputs.web }}"
          echo "API changes detected: ${{ steps.filter.outputs.api }}"

  check-vercel-web:
    needs: changes
    if: ${{ needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Check Vercel Web Status
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "🔍 Checking Vercel Web deployment status..."
          
          # Get latest deployment
          DEPLOYMENT=$(vercel ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" | grep "$VERCEL_PROJECT_ID" | head -1)
          
          if [ -n "$DEPLOYMENT" ]; then
            echo "✅ Vercel Web deployment found"
            echo "📊 Deployment: $DEPLOYMENT"
            echo "🔗 Web Preview: https://$VERCEL_PROJECT_ID.vercel.app"
          else
            echo "❌ No Vercel Web deployment found"
            exit 1
          fi
      
      - name: Comment PR with Web Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🌐 Vercel Web Status')
            );
            
            const isMain = context.ref === 'refs/heads/main';
            const webUrl = isMain ? '${{ secrets.WEB_URL }}' : '${{ secrets.WEB_URL_PREPROD }}';
            const environment = isMain ? 'Production' : 'Pre-production';
            
            const commentBody = `🌐 **Vercel Web Status**
            
            ✅ **Build Status**: Success
            🔗 **Preview URL**: ${webUrl}
            📊 **Project**: plataforma-pagos-daii-web
            🌍 **Environment**: ${environment}
            🕒 **Last Check**: ${new Date().toISOString()}
            
            ---
            *This status is automatically updated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  check-vercel-api:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Check Vercel API Status
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_API_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        run: |
          echo "🔍 Checking Vercel API deployment status..."
          
          # Get latest deployment
          DEPLOYMENT=$(vercel ls --token "$VERCEL_TOKEN" --scope "$VERCEL_ORG_ID" | grep "$VERCEL_PROJECT_ID" | head -1)
          
          if [ -n "$DEPLOYMENT" ]; then
            echo "✅ Vercel API deployment found"
            echo "📊 Deployment: $DEPLOYMENT"
            echo "🔗 API Preview: https://$VERCEL_PROJECT_ID.vercel.app"
          else
            echo "❌ No Vercel API deployment found"
            exit 1
          fi
      
      - name: Comment PR with API Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('🚀 Vercel API Status')
            );
            
            const isMain = context.ref === 'refs/heads/main';
            const apiUrl = isMain ? '${{ secrets.API_URL }}' : '${{ secrets.API_URL_PREPROD }}';
            const environment = isMain ? 'Production' : 'Pre-production';
            
            const commentBody = `🚀 **Vercel API Status**
            
            ✅ **Build Status**: Success
            🔗 **Preview URL**: ${apiUrl}
            📊 **Project**: plataforma-pagos-daii-api
            🌍 **Environment**: ${environment}
            🕒 **Last Check**: ${new Date().toISOString()}
            
            ---
            *This status is automatically updated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
